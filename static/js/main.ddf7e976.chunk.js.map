{"version":3,"sources":["rotator.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["addMember","state","memberId","members","id","Error","maxCount","getMaxCount","count","lastAssigned","prevAssigned","assignNext","now","member","designateFromMembers","assign","skippedMemberIds","unassignedMembers","filter","length","minCount","getMinCount","minCountMembers","sort","a","b","max","min","Infinity","target","increasedTarget","increment","map","currentMember","prevMember","getTime","skipAndAssignNext","newState","current","membersExceptSkipped","revert","concat","skippedId","revertedMember","revertAssignment","undefined","isSkipped","skippedMemberId","App","props","localStorageState","localStorage","getItem","JSON","parse","newMemberId","rotator","error","className","onSubmit","this","handleAdd","bind","type","value","onChange","handleChangeNewMemberName","onClick","handleAssignNext","handleSkipAndAssignNext","handleRevertAssignment","handleSave","handleClear","style","float","i","key","Date","toISOString","stringify","event","setState","preventDefault","err","message","setItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ddf7e976.chunk.js","sourcesContent":["export interface Member {\n  id: string;\n  count: number;\n  lastAssigned: number;\n  prevAssigned: number;\n}\n\nexport interface State {\n  members: Member[];\n  currentMember: Member | undefined;\n  prevMember: Member | undefined;\n  skippedMemberIds: string[];\n}\n\nexport const initialState = (): State => {\n  return {\n    members: [],\n    currentMember: undefined,\n    prevMember: undefined,\n    skippedMemberIds: [],\n  };\n};\n\nexport const addMember = (state: State, memberId: string): State => {\n  for (const member of state.members) {\n    if (member.id === memberId) {\n      throw new Error(`Duplicated member ID: ${memberId}`);\n    }\n  }\n\n  const maxCount = getMaxCount(state.members);\n\n  return {\n    ...state,\n    members: [\n      ...state.members,\n      {\n        id: memberId,\n        count: maxCount < 1 ? 0 : maxCount - 1,\n        lastAssigned: 0,\n        prevAssigned: 0,\n      },\n    ],\n  };\n};\n\nexport const assignNext = (state: State, now: Date): State => {\n  const member = designateFromMembers(state.members);\n  return {\n    ...assign(state, member, now),\n    skippedMemberIds: [],\n  };\n};\n\nconst designateFromMembers = (members: Member[]): Member => {\n  const unassignedMembers = members.filter(\n    (member) => member.lastAssigned === 0,\n  );\n  if (unassignedMembers.length > 0) {\n    return unassignedMembers[0];\n  }\n\n  const minCount = getMinCount(members);\n  const minCountMembers = members.filter((member) => member.count === minCount);\n  if (minCountMembers.length > 0) {\n    return minCountMembers.sort((a, b) => {\n      if (a.lastAssigned < b.lastAssigned) {\n        return -1;\n      }\n      if (a.lastAssigned > b.lastAssigned) {\n        return 1;\n      }\n\n      return 0;\n    })[0];\n  }\n\n  throw new Error('Not implemented');\n};\n\nconst getMaxCount = (members: Member[]): number => {\n  let max = -1;\n  for (const member of members) {\n    if (member.count > max) {\n      max = member.count;\n    }\n  }\n\n  return max;\n};\n\nconst getMinCount = (members: Member[]): number => {\n  let min = Infinity;\n  for (const member of members) {\n    if (member.count < min) {\n      min = member.count;\n    }\n  }\n\n  return min;\n};\n\nconst assign = (state: State, target: Member, now: Date): State => {\n  const increasedTarget = increment(target, now);\n  const members = state.members.map((member) => {\n    return {\n      ...(member.id === target.id ? increasedTarget : member),\n    };\n  });\n\n  return {\n    ...state,\n    members,\n    currentMember: increasedTarget,\n    prevMember: state.currentMember,\n  };\n};\n\nconst increment = (member: Member, now: Date): Member => {\n  return {\n    ...member,\n    count: member.count + 1,\n    lastAssigned: now.getTime(),\n    prevAssigned: member.lastAssigned,\n  };\n};\n\nexport const skipAndAssignNext = (state: State, now: Date): State => {\n  if (typeof state.currentMember === 'undefined') {\n    throw new Error('not implemented');\n  }\n  if (state.skippedMemberIds.length >= state.members.length - 1) {\n    throw new Error('No one is remaining to assign next');\n  }\n  let newState = { ...state };\n  const current = state.currentMember;\n  newState = {\n    ...newState,\n    members: revert(newState.members, current),\n    skippedMemberIds: newState.skippedMemberIds.concat(current.id),\n  };\n\n  const membersExceptSkipped = newState.members.filter((member) => {\n    for (const skippedId of newState.skippedMemberIds) {\n      if (member.id === skippedId) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n  const member = designateFromMembers(membersExceptSkipped);\n  return assign(newState, member, now);\n};\n\nconst revert = (members: Member[], revertedMember: Member): Member[] => {\n  return members.map((member) => {\n    if (member.id === revertedMember.id) {\n      return {\n        ...member,\n        count: member.count - 1,\n        lastAssigned: member.prevAssigned,\n        prevAssigned: 0,\n      };\n    } else {\n      return member;\n    }\n  });\n};\n\nexport const revertAssignment = (state: State): State => {\n  if (typeof state.currentMember === 'undefined') {\n    throw new Error('There is no previous state to revert to');\n  }\n  if (typeof state.prevMember === 'undefined') {\n    throw new Error('There is no previous state to revert to');\n  }\n\n  return {\n    members: revert(state.members, state.currentMember),\n    currentMember: state.prevMember,\n    prevMember: undefined,\n    skippedMemberIds: state.skippedMemberIds,\n  };\n};\n","import React from 'react';\nimport './App.css';\n\nimport {\n  initialState,\n  addMember,\n  State as RotatorState,\n  assignNext,\n  skipAndAssignNext,\n  revertAssignment,\n  Member,\n} from './rotator';\n\ninterface AppState {\n  newMemberId: string;\n  rotator: RotatorState;\n  error: string | undefined;\n}\n\nconst isSkipped = (state: RotatorState, member: Member) => {\n  for (const skippedMemberId of state.skippedMemberIds) {\n    if (member.id === skippedMemberId) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n\n    const localStorageState = localStorage.getItem('rotatorState');\n    if (typeof localStorageState === 'string') {\n      this.state = JSON.parse(localStorageState);\n    } else {\n      this.state = {\n        newMemberId: '',\n        // @ts-ignore\n        rotator: initialState(),\n        error: undefined,\n      };\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Rotator Prototype</h1>\n          <form onSubmit={this.handleAdd.bind(this)}>\n            <div>\n              New Member:\n              <input\n                type=\"text\"\n                value={this.state.newMemberId}\n                onChange={this.handleChangeNewMemberName.bind(this)}\n              />\n              <input type=\"submit\" value=\"Add\" />\n            </div>\n            <div>\n              <input\n                type=\"button\"\n                value=\"Assign Next\"\n                onClick={this.handleAssignNext.bind(this)}\n              />\n              <input\n                type=\"button\"\n                value=\"Skip And Assign Next\"\n                onClick={this.handleSkipAndAssignNext.bind(this)}\n              />\n              <input\n                type=\"button\"\n                value=\"Revert Assignment\"\n                onClick={this.handleRevertAssignment.bind(this)}\n              />\n              <input\n                type=\"button\"\n                value=\"Save\"\n                onClick={this.handleSave.bind(this)}\n              />\n              <input\n                type=\"button\"\n                value=\"Clear\"\n                onClick={this.handleClear.bind(this)}\n              />\n            </div>\n            <div>Last Error: {this.state.error}</div>\n            <div style={{ float: 'left' }}>\n              <table>\n                <thead>\n                  <tr>\n                    <td>ID</td>\n                    <td>Count</td>\n                    <td>Last Assigned</td>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.rotator.members.map((member, i) => (\n                    <tr\n                      className={\n                        this.state.rotator &&\n                        this.state.rotator.currentMember &&\n                        (this.state.rotator.currentMember.id === member.id\n                          ? 'current'\n                          : isSkipped(this.state.rotator, member)\n                          ? 'skipped'\n                          : '')\n                      }\n                      key={i}\n                    >\n                      <td>{member.id}</td>\n                      <td>{member.count}</td>\n                      <td>\n                        {member.lastAssigned === 0\n                          ? '-'\n                          : new Date(member.lastAssigned).toISOString()}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <div style={{ float: 'left' }}>\n              <pre className=\"react-state\">\n                <code>{JSON.stringify(this.state, null, 2)}</code>\n              </pre>\n            </div>\n          </form>\n        </header>\n      </div>\n    );\n  }\n\n  handleChangeNewMemberName(event: React.FormEvent<HTMLInputElement>) {\n    // @ts-ignore\n    this.setState({ newMemberId: event.target.value });\n  }\n\n  handleAdd(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    try {\n      if (this.state.newMemberId !== '') {\n        this.setState({\n          newMemberId: '',\n          rotator: addMember(this.state.rotator, this.state.newMemberId),\n        });\n      }\n    } catch (err) {\n      this.setState({ error: err.message });\n    }\n  }\n\n  handleAssignNext(event: React.FormEvent<HTMLInputElement>) {\n    event.preventDefault();\n    try {\n      this.setState({\n        rotator: assignNext(this.state.rotator, new Date()),\n      });\n    } catch (err) {\n      this.setState({ error: err.message });\n    }\n  }\n\n  handleSkipAndAssignNext(event: React.FormEvent<HTMLInputElement>) {\n    event.preventDefault();\n    try {\n      this.setState({\n        rotator: skipAndAssignNext(this.state.rotator, new Date()),\n      });\n    } catch (err) {\n      this.setState({ error: err.message });\n    }\n  }\n\n  handleRevertAssignment(event: React.FormEvent<HTMLInputElement>) {\n    event.preventDefault();\n    try {\n      this.setState({\n        rotator: revertAssignment(this.state.rotator),\n      });\n    } catch (err) {\n      this.setState({ error: err.message });\n    }\n  }\n\n  handleSave(event: React.FormEvent<HTMLInputElement>) {\n    event.preventDefault();\n    localStorage.setItem('rotatorState', JSON.stringify(this.state));\n  }\n\n  handleClear(event: React.FormEvent<HTMLInputElement>) {\n    event.preventDefault();\n    this.setState({ rotator: initialState() });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}